#include "test.h"

void FloatMultiMatrix_(FLOAT64* A, UINT16 CA, UINT16 VA, FLOAT64* B, UINT16 CB, UINT16 VB, FLOAT64* C)
{
	/* 计数器 */
	UINT16 i, j, m;

	/* 缓冲变量 */
	FLOAT64 buf;
	for (i = 0; i < CA; i++)
	{
		/* A的行向量乘以B的列向量 */
		for (j = 0; j < VB; j++)
		{
			buf = 0;
			for (m = 0; m < VA; m++)
			{
				buf = buf + A[i * VA + m] * B[m * VB + j];
			}
			C[i * VB + j] = buf;/* C_{i,j}=A_{i,:}*B_{:,j} */
		}
	}
}

int GetOptimizeResult(UINT32* PredictedConsPosOfFolTrain, FLOAT64* barQ, FLOAT64* barD, FLOAT64* StatusOfFolTrain, FLOAT64* SpdLmtBuf, INT8* OptAccFromMpcBuf)
{
	/* 计数器 */
	short i, j;

	Matrix<FLOAT64>G(BJTU_MPC_PREDICTION_HORIZON, BJTU_MPC_PREDICTION_HORIZON);
	Vector<FLOAT64>g(BJTU_MPC_PREDICTION_HORIZON);

	for (i = 0; i < BJTU_MPC_PREDICTION_HORIZON; i++)
	{
		for (j = 0; j < BJTU_MPC_PREDICTION_HORIZON; j++)
		{
			G[i][j] = barQ[i * BJTU_MPC_PREDICTION_HORIZON + j];
		}
	}

	for (i = 0; i < BJTU_MPC_PREDICTION_HORIZON; i++)
	{
		g[i] = barD[i];
	}

	/* 约束 */
	Matrix<FLOAT64>CI((NUM_OF_CONS + 2) * BJTU_MPC_PREDICTION_HORIZON, BJTU_MPC_PREDICTION_HORIZON);
	Vector<FLOAT64>ci((NUM_OF_CONS + 2) * BJTU_MPC_PREDICTION_HORIZON);

	FLOAT64 Cu[NUM_OF_CONS * BJTU_MPC_PREDICTION_HORIZON * BJTU_MPC_PREDICTION_HORIZON] = { 0.00177567625968551,0,0,0,0,0,0,0,0,0,0.0287432282975081,0.00177567625968551,0,0,0,0,0,0,0,0,0.0516127506601240,0.0287432282975081,0.00177567625968551,0,0,0,0,0,0,0,0.0787046190325293,0.0516127506601240,0.0287432282975081,0.00177567625968551,0,0,0,0,0,0,0.108959583564505,0.0787046190325293,0.0516127506601240,0.0287432282975081,0.00177567625968551,0,0,0,0,0,0.141581651941960,0.108959583564505,0.0787046190325293,0.0516127506601240,0.0287432282975081,0.00177567625968551,0,0,0,0,0.175972663901542,0.141581651941960,0.108959583564505,0.0787046190325293,0.0516127506601240,0.0287432282975081,0.00177567625968551,0,0,0,0.211683125463992,0.175972663901542,0.141581651941960,0.108959583564505,0.0787046190325293,0.0516127506601240,0.0287432282975081,0.00177567625968551,0,0,0.248375261976920,0.211683125463992,0.175972663901542,0.141581651941960,0.108959583564505,0.0787046190325293,0.0516127506601240,0.0287432282975081,0.00177567625968551,0,0.285795253315414,0.248375261976920,0.211683125463992,0.175972663901542,0.141581651941960,0.108959583564505,0.0787046190325293,0.0516127506601240,0.0287432282975081,0.00177567625968551,0.0260252267714017,0,0,0,0,0,0,0,0,0,0.101614590426946,0.0260252267714017,0,0,0,0,0,0,0,0,0.125915534399614,0.101614590426946,0.0260252267714017,0,0,0,0,0,0,0,0.144127612287301,0.125915534399614,0.101614590426946,0.0260252267714017,0,0,0,0,0,0,0.157764095076501,0.144127612287301,0.125915534399614,0.101614590426946,0.0260252267714017,0,0,0,0,0,0.167962171502352,0.157764095076501,0.144127612287301,0.125915534399614,0.101614590426946,0.0260252267714017,0,0,0,0,0.175576413027822,0.167962171502352,0.157764095076501,0.144127612287301,0.125915534399614,0.101614590426946,0.0260252267714017,0,0,0,0.181249010653259,0.175576413027822,0.167962171502352,0.157764095076501,0.144127612287301,0.125915534399614,0.101614590426946,0.0260252267714017,0,0,0.185462556283910,0.181249010653259,0.175576413027822,0.167962171502352,0.157764095076501,0.144127612287301,0.125915534399614,0.101614590426946,0.0260252267714017,0,0.188579706729108,0.185462556283910,0.181249010653259,0.175576413027822,0.167962171502352,0.157764095076501,0.144127612287301,0.125915534399614,0.101614590426946,0.0260252267714017,-0.0260252267714017,0,0,0,0,0,0,0,0,0,-0.101614590426946,-0.0260252267714017,0,0,0,0,0,0,0,0,-0.125915534399614,-0.101614590426946,-0.0260252267714017,0,0,0,0,0,0,0,-0.144127612287301,-0.125915534399614,-0.101614590426946,-0.0260252267714017,0,0,0,0,0,0,-0.157764095076501,-0.144127612287301,-0.125915534399614,-0.101614590426946,-0.0260252267714017,0,0,0,0,0,-0.167962171502352,-0.157764095076501,-0.144127612287301,-0.125915534399614,-0.101614590426946,-0.0260252267714017,0,0,0,0,-0.175576413027822,-0.167962171502352,-0.157764095076501,-0.144127612287301,-0.125915534399614,-0.101614590426946,-0.0260252267714017,0,0,0,-0.181249010653259,-0.175576413027822,-0.167962171502352,-0.157764095076501,-0.144127612287301,-0.125915534399614,-0.101614590426946,-0.0260252267714017,0,0,-0.185462556283910,-0.181249010653259,-0.175576413027822,-0.167962171502352,-0.157764095076501,-0.144127612287301,-0.125915534399614,-0.101614590426946,-0.0260252267714017,0,-0.188579706729108,-0.185462556283910,-0.181249010653259,-0.175576413027822,-0.167962171502352,-0.157764095076501,-0.144127612287301,-0.125915534399614,-0.101614590426946,-0.0260252267714017,1,0,0,0,0,0,0,0,0,0,-1,0,0,0,0,0,0,0,0,0,-1,1,0,0,0,0,0,0,0,0,1,-1,0,0,0,0,0,0,0,0,0,-1,1,0,0,0,0,0,0,0,0,1,-1,0,0,0,0,0,0,0,0,0,-1,1,0,0,0,0,0,0,0,0,1,-1,0,0,0,0,0,0,0,0,0,-1,1,0,0,0,0,0,0,0,0,1,-1,0,0,0,0,0,0,0,0,0,-1,1,0,0,0,0,0,0,0,0,1,-1,0,0,0,0,0,0,0,0,0,-1,1,0,0,0,0,0,0,0,0,1,-1,0,0,0,0,0,0,0,0,0,-1,1,0,0,0,0,0,0,0,0,1,-1,0,0,0,0,0,0,0,0,0,-1,1,0,0,0,0,0,0,0,0,1,-1,0,0,0,0,0,0,0,0,0,-1,1,0,0,0,0,0,0,0,0,1,-1 };
	FLOAT64 Cs[NUM_OF_CONS * BJTU_MPC_PREDICTION_HORIZON] = { 0.199933349996667,1.19866776596037,2.59620401335891,4.39214348969531,6.58608799087586,9.17763971081193,12.1664012410221,15.5519755702348,19.3339660839914,23.5119765642493,1.99900033325002,3.99400666117020,5.98701897993321,7.97803928255152,9.96706956004562,11.9541118014459,13.9391679937949,15.9222401221488,17.9033301695800,19.8824401171788,-1.99900033325002,-3.99400666117020,-5.98701897993321,-7.97803928255152,-9.96706956004562,-11.9541118014459,-13.9391679937949,-15.9222401221488,-17.9033301695800,-19.8824401171788,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14 };
	FLOAT64 Cx[DIM_OF_CONS_BUF * DIM_OF_SYS_STATE] = { -1,-0.199900033325002,-0.0182176587399812,-1,-0.399600266533387,-0.0666653952405145,-1,-0.599100899325405,-0.137795608539377,-1,-0.798402131201706,-0.225936482619106,-1,-0.997504161463538,-0.326825811220217,-1,-1.19640718921295,-0.437260677773768,-1,-1.39511141335298,-0.554834197825415,-1,-1.59361703258787,-0.677737686944890,-1,-1.79192424542327,-0.804611994402172,-1,-1.99003325016639,-0.934435783800908,0,-0.999000499833375,-0.173874806553600,0,-0.998001998667333,-0.304363987618366,0,-0.997004495503373,-0.402250029983438,0,-0.996007989343992,-0.475635727460125,0,-0.995012479192682,-0.530610145434656,0,-0.994017964053935,-0.571749078107565,0,-0.993024442933235,-0.602491130745244,0,-0.992031914837061,-0.625420336952317,0,-0.991040378772884,-0.642478539134451,0,-0.990049833749168,-0.655124987593663,0,0.999000499833375,0.173874806553600,0,0.998001998667333,0.304363987618366,0,0.997004495503373,0.402250029983438,0,0.996007989343992,0.475635727460125,0,0.995012479192682,0.530610145434656,0,0.994017964053935,0.571749078107565,0,0.993024442933235,0.602491130745244,0,0.992031914837061,0.625420336952317,0,0.991040378772884,0.642478539134451,0,0.990049833749168,0.655124987593663,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 };
	/* Cu* U <= Cs + Cx * x + [sc; vlim; 0; a(t); -a(t); 0] */


	FLOAT64 RightItem[DIM_OF_CONS_BUF];

	/* M1=Cx*x */
	FLOAT64 M11[DIM_OF_CONS_BUF];
	FloatMultiMatrix_(Cx, DIM_OF_CONS_BUF, DIM_OF_SYS_STATE, StatusOfFolTrain, DIM_OF_SYS_STATE, 1, M11);

	/* Cs + [sc; vlim; a; -a; 0] */
	for (i = 0; i < BJTU_MPC_PREDICTION_HORIZON; i++)
	{
		Cs[i] = Cs[i] + PredictedConsPosOfFolTrain[i];
		Cs[i + BJTU_MPC_PREDICTION_HORIZON] = Cs[i + BJTU_MPC_PREDICTION_HORIZON] + SpdLmtBuf[i];
	}
	Cs[3 * BJTU_MPC_PREDICTION_HORIZON] = Cs[3 * BJTU_MPC_PREDICTION_HORIZON] + StatusOfFolTrain[2];
	Cs[3 * BJTU_MPC_PREDICTION_HORIZON + 1] = Cs[3 * BJTU_MPC_PREDICTION_HORIZON + 1] - StatusOfFolTrain[2];

	for (i = 0; i < DIM_OF_CONS_BUF; i++)
	{
		RightItem[i] = Cs[i] + M11[i];
	}

	for (i = 0; i < NUM_OF_CONS * BJTU_MPC_PREDICTION_HORIZON; i++)
	{
		for (j = 0; j < BJTU_MPC_PREDICTION_HORIZON; j++)
		{
			CI[i][j] = -Cu[i * BJTU_MPC_PREDICTION_HORIZON + j];
		}
	}


	for (i = 0; i < NUM_OF_CONS * BJTU_MPC_PREDICTION_HORIZON; i++)
	{
		ci[i] = RightItem[i];
	}

	for (i = NUM_OF_CONS * BJTU_MPC_PREDICTION_HORIZON; i < (NUM_OF_CONS + 2) * BJTU_MPC_PREDICTION_HORIZON; i++)
	{
		for (j = 0; j < BJTU_MPC_PREDICTION_HORIZON; j++)
		{
			CI[i][j] = 0;
		}
	}

	for (i = 0; i < BJTU_MPC_PREDICTION_HORIZON; i++)
	{
		CI[NUM_OF_CONS * BJTU_MPC_PREDICTION_HORIZON + i][i] = -1;
		ci[NUM_OF_CONS * BJTU_MPC_PREDICTION_HORIZON + i] = BJTU_MPC_MAX_ACC;

		CI[NUM_OF_CONS * BJTU_MPC_PREDICTION_HORIZON + BJTU_MPC_PREDICTION_HORIZON + i][i] = 1;
		ci[NUM_OF_CONS * BJTU_MPC_PREDICTION_HORIZON + BJTU_MPC_PREDICTION_HORIZON + i] = -BJTU_MPC_MIN_ACC;
	}

	Matrix<FLOAT64>CIT(BJTU_MPC_PREDICTION_HORIZON, (NUM_OF_CONS + 2) * BJTU_MPC_PREDICTION_HORIZON);

	for (i = 0; i < (NUM_OF_CONS + 2) * BJTU_MPC_PREDICTION_HORIZON; i++)
	{
		for (j = 0; j < BJTU_MPC_PREDICTION_HORIZON; j++)
		{
			CIT[j][i] = CI[i][j];
		}
	}

	Vector<FLOAT64>Output(BJTU_MPC_PREDICTION_HORIZON);

	Matrix<FLOAT64>CE(BJTU_MPC_PREDICTION_HORIZON, 0);
	Vector<FLOAT64>ce(0);



	solve_quadprog(G, g, CE, ce, CIT, ci, Output); //之后可以查查求解器输出标志位代表什么含义


	/* 将求解优化函数得到的结果赋值到输出变量中 */
	for (i = 0; i < BJTU_MPC_PREDICTION_HORIZON; i++)
	{
		OptAccFromMpcBuf[i] = INT8(Output[i]);
	}

	return 0;
}

